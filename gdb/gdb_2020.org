#+TITLE: Introduction à GNU GDB pour le fortran
#+AUTHOR: Marc Fuentes
#+EMAIL: marc.fuentes@inria.fr
#+DATE: 07 avril 2020
#+STARTUP: content hidestars inlineimages
#+LINK: org info:org#%s
#+COLUMNS: %38ITEM %TODO %TAGS
* prérequis
  - gfortran 
  - gdb 
  - python (optionel)
  - openmpi (optionel)
* Méthodes de déverminage
- utiliser une instruction d'affichage : =printf= , =cout <<=, =print*,= → bricolage
- simuler l'exécution du programme pas-à-pas avec un dévermineur → Gnu GDB, Alinea DDT,
  etc...
- utiliser les bonnes options du compilateur pour trouver des dépassements 
  e.g. *-fsanitize=address*
  (https://github.com/google/sanitizers/wiki/AddressSanitizer) ou 
  *-fcheck=bounds* 
- utiliser un simulateur automatique qui recherche les écritures et lectures
  invalides, les fuites de mémoire, etc... → *valgrind --tool=memcheck*
* Présentation de GDB
** points d'arrêt
*** Compilez le programme suivante =gfortran -g ex_1.f90=
#+begin_src fortran
program ex_1
  implicit none
  integer :: i
  print *, id([(i,i=1,5)])

contains

  pure function cumsum(x) result(y)
    integer, intent(in) :: x(:)
    integer :: y(size(x,1))
    integer :: i
    y(1) = x(1)
    do i =2, size(x, 1)
      y(i) = y(i-1) + x(i)
    end do
  end function cumsum

  pure function id(x) result(z)
    integer, intent(in) :: x(:)
    integer, allocatable :: y(:)
    integer :: z(x(size(x,1)))
    y = [0, cumsum(x) ]
    z = y(2:size(y,1))-x(1:size(y,1)-1)
  end function

end program ex_1
#+end_src
*** et passez-le en arguments à GDB : =gdb ./a.out=
*** voir les sources
#+begin_src gdb
(gdb) l 
#+end_src
_Notes_: 
 - on peut aussi utiliser une plage avec des numéros de lignes e.g. =l 11,15=
*** mettre un point d'arrêt (sur un ligne)
#+begin_src gdb
(gdb) b 22
Breakpoint 1 at 0x135f: file ex_1.f90, line 22.
#+end_src
_Note_ : si il y a plusieurs fichiers la syntaxe est =b nomFichier:numeroDeLigne=
*** ou sur une fonction
#+begin_src gdb
(gdb) b cumsum
Breakpoint 2 at 0x1bf8: file ex_1.f90, line 8.
#+end_src
_Note_ : on utilise <tab> pour completer le nom de la fonction. Il peut y 
avoir un suffixe ajouté selon la version de gdb
*** obtenir les infos sur les points d'arrêt
#+begin_src gdb
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000000135f in ex_1::id
                                                   at ex_1.f90:22
2       breakpoint     keep y   0x0000000000001bf8 in ex_1::cumsum
                                                   at ex_1.f90:8
#+end_src
*** lancer l'execution
#+begin_src gdb
(gdb) run
4         print *, id([(i,i=1,5)])
#+end_src gdb
*** point d'arrêt conditionnel
On peut utiliser un point d'arrêt en ajoutant une condition. On peut souhaiter
s'arrêter à une iteration précise dans une boucle. La syntaxe conditionelle 
est la suivante =b ligne if condition=. Par exemple, si l'on veut stopper dans la fonction 
=cumsum= à l'iteration où =i= vaut 3
 - on va a ligne 13
#+begin_src gdb
(gdb) disable 2
(gdb) tb 13
Temporary breakpoint 3 at 0x555555555d2c: file ex_1.f90, line 13.
(gdb) c
Continuing.

Temporary breakpoint 3, ex_1::cumsum (__result=..., x=...)
    at ex_1.f90:13
13          do i =2, size(x, 1)
#+end_src
 - et l'on pose un point d'arrêt conditionel
#+begin_src gdb
(gdb) b 14 if i .eq. 3
Breakpoint 4 at 0x555555555dbb: file ex_1.f90, line 14.
(gdb) c
Continuing.

Breakpoint 4, ex_1::cumsum (__result=..., x=...) at ex_1.f90:14
14            y(i) = y(i-1) + x(i)
(gdb) p i
$1 = 3
#+end_src
_Note_ :  pour une condition en C/C++ on écrira if i==3
- on nettoie et on redémarre
#+begin_src gdb
(gdb) delete 4
(gdb) disable 2
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/fux/sources/nahasketa/gdb/a.out

Breakpoint 1, ex_1::id (__result=..., x=...) at ex_1.f90:22
22          y = [0, cumsum(x) ]
#+end_src
** Exécution pas à pas
Pour simuler l'exécution du programme dans GDB, nous disposons de 
 diverses commandes pour se déplacer dans le code
*** descendre dans une fonction sur la ligne courante =step=
#+begin_src gdb
(gdb) s
ex_1::cumsum (__result=..., x=...) at ex_1.f90:8
8         pure function cumsum(x) result(y)
#+end_src
*** passer a l'instruction d'aprés =next=
#+begin_src gdb
(gdb) n
12          y(1) = x(1)
#+end_src
*** continuer jusqu'à une ligne =until=
#+begin_src gdb
(gdb) u 14
ex_1::cumsum (__result=..., x=...) at ex_1.f90:14
14            y(i) = y(i-1) + x(i)
#+end_src
*** aller à la fin d'une fonction =finish=
#+begin_src gdb
(gdb) fin
Run till exit from #0  ex_1::cumsum (__result=..., x=...)
    at ex_1.f90:14
0x00005555555555c2 in ex_1::id (__result=..., x=...) at ex_1.f90:22
22          y = [0, cumsum(x) ]
#+end_src
** examiner la pile d'appel
on peut examiner la pile d'appel avec la commande =backtrace= (raccourci bt)
#+begin_src gdb
(gdb) enable 2
(gdb) disable 1
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/fux/sources/nahasketa/gdb/a.out

Breakpoint 2, ex_1::cumsum (__result=..., x=...) at ex_1.f90:8
8         pure function cumsum(x) result(y)
(gdb) bt
#0  ex_1::cumsum (__result=..., x=...) at ex_1.f90:8
#1  0x00005555555555c2 in ex_1::id (__result=..., x=...) at ex_1.f90:22
#2  0x0000555555555b57 in ex_1 () at ex_1.f90:4
#3  0x0000555555555e6e in main (argc=1, argv=0x7fffffffe00a)
    at ex_1.f90:4
#4  0x00007ffff7993023 in __libc_start_main () from /usr/lib/libc.so.6
#5  0x00005555555550fe in _start ()

#+end_src
où =#0=, =#1=, =#2= correspondent aux appels de fonctions. \\
*** on peut lister les arguments
#+begin_src gdb
(gdb) info args
__result = (0, 0, 0, 0, 0)
x = (1, 2, 3, 4, 5)
#+end_src
*** ou les variables locales
#+begin_src gdb
(gdb) info locals
i = 0
#+end_src
*** et se déplacer dans la pile d'appel (=up= and =down=)
#+begin_src gdb
(gdb) up
#1  0x00005555555555c2 in ex_1::id (__result=..., x=...) at ex_1.f90:22
22          y = [0, cumsum(x) ]
(gdb) info local
y = <not allocated>
#+end_src
** examiner les variables et la mémoire
_Note_ : si la version de gdb est vieille, on n'a pas forcement de «joli 
affichage pour les tableau» dans ce cas on peut toujours jouer avec la mémoire
Afin de comprendre les dysfonctionnements du programme, il est nécessaire
de pouvoir connaître des différentes valeurs des variables du programme.
*** affichage ponctuel
#+begin_src gdb
(gdb) whatis x
type = integer(kind=4) (5)
(gdb) p x
$3 = (1, 2, 3, 4, 5)
#+end_src
*** affichage réccurent (quand la variable est dans la portée)
#+begin_src gdb
(gdb) down
#0  ex_1::cumsum (__result=..., x=...) at ex_1.f90:8
8         pure function cumsum(x) result(y)
(gdb) display i
1: i = 0
(gdb) u 13
ex_1::cumsum (__result=..., x=...) at ex_1.f90:13
13          do i =2, size(x, 1)
1: i = 0
(gdb) n
14            y(i) = y(i-1) + x(i)
1: i = 2
(gdb) n
13          do i =2, size(x, 1)
1: i = 2
(gdb) n
14            y(i) = y(i-1) + x(i)
1: i = 3
(gdb) undisplay 1
#+end_src
*** données contiguës
#+begin_src gdb
(gdb) p x(1:3)
$5 = (1, 2, 3)
(gdb) p  &x
$8 = (PTR TO -> ( integer(kind=4) (5) )) 0x555555556040 <A.29.4073>
#+end_src
_Note_: en C, si x est un tableau ou un pointeur, on peut aussi utiliser la syntaxe =p *x@10=
*** affichage de la mémoire
On peut aussi afficher directement le contenu de la mémoire avec une
instruction =x /FMT addresse= où format contient un nombre de répétitions
et une lettre de format (d
#+begin_src gdb
(gdb) x /5w &x
0x555555556040 <A.29.4073>:     1       2       3       4
0x555555556050 <A.29.4073+16>:  5
#+end_src
ou une lettre de taille (b,h,w,g)
#+begin_src gdb
(gdb) x /8h &__result
0x55555555c950: 1       0       3       0       0       0       0      0
#+end_src
*** 
** points de surveillance
On peut stopper un programme selon le fait qu'une variable ou qu'un
emplacement mémoire change de valeur, on utilise des points de surveillance
«watchpoint». On peut poser plusieurs types de points de surveillance
| type     | commande |
|----------+----------|
| lecture  | rwatch   |
| écriture | awatch   |
| général  | watch    |
*** exemple avec watch
On va chercher quand la $4^{ème}$ valeur de =__result=  change de valeur :
 - on affiche la valeur du pointeur du tableau
#+begin_src gdb
(gdb) p &__result
$21 = (PTR TO -> ( integer(kind=4) (0:4) )) 0x55555555c950
#+end_src
 - on pose un point de surveillance sur le $4^{ème}$ élément (12= 3 *4 octets)
#+begin_src gdb
(gdb) watch *(0x55555555c950+12)
Hardware watchpoint 3: *(0x55555555c950+12)
#+end_src
 - on continue l'execution
#+begin_src gdb
(gdb) c
Continuing.
Hardware watchpoint 3: *(0x55555555c950+12)

Old value = 0
New value = 10
ex_1::cumsum (__result=..., x=...) at ex_1.f90:13
13          do i =2, size(x, 1)
1: i = 4
#+end_src
* Bonus
** scripts
On peut «donner à manger» des scripts de commande à gdb sous la forme
#+begin_src sh
gdb -x ./monScript
#+end_src
Pour les commandes de base que l'on veut charger à chaque fois, on peut par 
exemple les placer dans =~/.gdbinit=. Par exemple pour éviter de demander confirmation on peut écrire
#+begin_src gdb
set confirm off
#+end_src
*** une application de ce principe concerne le déverminage parallèle d'un programme MPI
**** Soit le programme Fortran MPI suivant
#+begin_src fortran
program coucou
  use mpi
  implicit none
  integer :: world_rank, ierr

  call MPI_Init(ierr)
  call MPI_Comm_rank(MPI_COMM_WORLD, world_rank, ierr)
  print '(ai0a)', "Coucou depuis ", world_rank, " !"
  call MPI_Finalize(ierr)
end program 
#+end_src
*** et le script suivant =gdb_mpi.x= 
#+begin_src gdb
file ./a.out
b 8
run
#+end_src
**** on peut lancer plusieurs terminaux qui exécutent chacun en parallèle le script gdb
#+begin_src sh
mpirun -np 4 xterm -e gdb -x gdb_src
#+end_src
**** ou mieux, si l'implementation de MPI est openmpi, on pourra utiliser le
multiplexeur de terminal avec le projet [[https://github.com/Azrael3000/tmpi][tmpi]]
#+begin_src sh
tmpi 2 gdb -x gdb_scr
#+end_src
** affichage personnalisé  («pretty-printing»)
Certains objets ou structures peuvent présenter une certaine complexité et leur
affichage standard par gdb peut être pénibles.
*** Soit le code suivant
#+begin_src fortran
program print_triangle
    type point
        integer ::x, y, index
    end type point

    type triangle
        type(point) :: t(3)
    end type triangle

    integer :: global_index
    type(point) :: z
    type(triangle) :: t1
    z = point(2,2, 3)
    t1 = init_triangle( [0, 0, 0, 1, 1, 0] , [1, 2, 3])
    print *, "coucou"

contains

    pure function init_triangle(values, indexes) result(t)
        type(triangle) :: t
        integer, intent(in) :: values(6), indexes(3)
        t%t(1) = point(values(1), values(2), indexes(1))
        t%t(2) = point(values(3), values(4), indexes(2))
        t%t(3) = point(values(5), values(6), indexes(3))
    end function init_triangle
end program
#+end_src
*** Si on fait un affichage classique d'un triangle
#+begin_src gdb
(gdb) p t1
$1 = {t = {{x = 0, y = 0, index = 0}, {x = 0, y = 1, index = 1}, {x = 1, y = 0, index = 2}}}
#+end_src
*** Vieille méthode basé sur du script GDB 
**** si on veut afficher seulement les indices, on peut écrire le code gdb suivant dans =pretty.gdb=
#+begin_src gdb
define pTriangle
if $argc .eq. 0
    help pTriangle
end
if $argc .eq. 1
    printf "Triangle : [%d, %d, %d]\n", $arg0 % t(1) % index, $arg0 % t(2) % index, $arg0 % t(3) % index
end
end
document pTriangle
    Prints the list of index of a triangle
    Syntax: pTriangle triangle
end
#+end_src
**** Dorénavant la commande =pTriangle= permet d'afficher les indices composant un triangle
#+begin_src gdb
(gdb) source pretty.gdb
(gdb) pTriangle t1
Triangle : [0, 1, 2]
#+end_src
*** Nouvelle méthode basé sur des scripts Python 
**** On peut écrire le code d'afficheur suivant dans le fichier pretty.py
#+begin_src python
# afficheur dedié pour les points
class PointPrinter(object):
    def __init__(self, val):
        self.val = val
    def to_string(self):
        return ("("+str(self.val["x"])+", "+str(self.val["y"])+")")

def Point_lookup(val):
    if str(val.type) == 'Type point':
        return PointPrinter(val)
    return None

gdb.pretty_printers.append(Point_lookup)

# afficheur dedié pour les triangles
class TrianglePrinter(object):
    def __init__(self, val):
            self.val = val
    def to_string(self):
        return "".join(map((lambda x : str(self.val["t"][x]["index"])+" "), [1, 2, 3]))

def Triangle_lookup(val):
    if str(val.type) == 'Type triangle':
        return TrianglePrinter(val)
    return None

gdb.pretty_printers.append(Triangle_lookup)
#+end_src
**** on peut utiliser l'afficheur dedié après son chargement
#+begin_src gdb
(gdb) source pretty.py 
(gdb) p t1
$2 = 1 2 3 
#+end_src
_Note_: ceci marche avec la version 8.0 de gdb, pour les versions anterieurs 
voir, la méthode ici [[https://codeyarns.com/2014/07/17/how-to-enable-pretty-printing-f-stl-in-gdb/][pretty-print]]
*** Pour un interface texte plus sympa  [[https://github.com/cyrus-and/gdb-dashboard][GDB Dashboard]]
**** copier le fichier .gdbinit dans ~/.gdbinit_dash et utiliser le 
#+begin_src bash
gdb -ix ~/.gdbinit_dash
#+end_src
**** image
#+NAME: fig: gdb dashboard 
[[./gdb_dash.png][Capture écran]]
